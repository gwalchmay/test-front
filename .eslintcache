[{"C:\\Users\\Philibert\\Desktop\\test-front\\src\\index.js":"1","C:\\Users\\Philibert\\Desktop\\test-front\\src\\reportWebVitals.js":"2","C:\\Users\\Philibert\\Desktop\\test-front\\src\\App.js":"3","C:\\Users\\Philibert\\Desktop\\test-front\\src\\components\\Navbar.jsx":"4","C:\\Users\\Philibert\\Desktop\\test-front\\src\\components\\Home.jsx":"5","C:\\Users\\Philibert\\Desktop\\test-front\\src\\components\\Archives.jsx":"6","C:\\Users\\Philibert\\Desktop\\test-front\\src\\components\\ConversationList.jsx":"7","C:\\Users\\Philibert\\Desktop\\test-front\\src\\components\\CurrentConversation.jsx":"8"},{"size":620,"mtime":1610915627687,"results":"9","hashOfConfig":"10"},{"size":362,"mtime":499162500000,"results":"11","hashOfConfig":"10"},{"size":718,"mtime":1610733479300,"results":"12","hashOfConfig":"10"},{"size":960,"mtime":1610915627687,"results":"13","hashOfConfig":"10"},{"size":1179,"mtime":1610733614411,"results":"14","hashOfConfig":"10"},{"size":1772,"mtime":1610915627686,"results":"15","hashOfConfig":"10"},{"size":554,"mtime":1610910218957,"results":"16","hashOfConfig":"10"},{"size":1928,"mtime":1610915627686,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"yw6nnh",{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"22"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"22"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"22"},"C:\\Users\\Philibert\\Desktop\\test-front\\src\\index.js",[],"C:\\Users\\Philibert\\Desktop\\test-front\\src\\reportWebVitals.js",[],["38","39"],"C:\\Users\\Philibert\\Desktop\\test-front\\src\\App.js",[],"C:\\Users\\Philibert\\Desktop\\test-front\\src\\components\\Navbar.jsx",[],"C:\\Users\\Philibert\\Desktop\\test-front\\src\\components\\Home.jsx",["40"],"import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport ConversationList from './ConversationList';\r\nimport CurrentConversation from './CurrentConversation';\r\n\r\nconst API_URL = process.env.REACT_APP_API_URL;\r\n\r\nfunction Home(props) {\r\n    const refresh = props.refresh;\r\n    const [conversations, setConversations] = useState([]);\r\n    const [selectedConversation, setSelectedConversation] = useState();\r\n\r\n    useEffect(() => {\r\n        function getConversations() {\r\n            axios.get(`http://localhost:8000/api/conversations/open`)\r\n                .then((res) => res.data)\r\n                .then((data) => { setConversations(data) });\r\n        }\r\n\r\n        getConversations();\r\n    }, [refresh, selectedConversation]);\r\n\r\n    return (\r\n        <div className=\"home\">\r\n            <ConversationList conversations={conversations} selectedConversation={selectedConversation} setSelectedConversation={setSelectedConversation} />\r\n            {selectedConversation ? <CurrentConversation selectedConversation={selectedConversation} setSelectedConversation={setSelectedConversation} /> : null}\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Home;","C:\\Users\\Philibert\\Desktop\\test-front\\src\\components\\Archives.jsx",["41"],"import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nfunction Archives() {\r\n\r\n    const [conversations, setConversations] = useState([]);\r\n\r\n    useEffect(() => {\r\n        function getConversations() {\r\n            axios.get(`http://localhost:8000/api/conversations`)\r\n                .then((res) => res.data)\r\n                .then((data) => { setConversations(data) });\r\n        }\r\n\r\n        getConversations();\r\n    }, []);\r\n\r\n    return (\r\n        <div>\r\n            {conversations.map(conversation => <p>Conversation {conversation.id}</p>)}\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Archives;","C:\\Users\\Philibert\\Desktop\\test-front\\src\\components\\ConversationList.jsx",["42"],"C:\\Users\\Philibert\\Desktop\\test-front\\src\\components\\CurrentConversation.jsx",["43"],"import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst API_URL = process.env.REACT_APP_API_URL;\r\n\r\n\r\nfunction CurrentConversation(props) {\r\n    const selectedConversation = props.selectedConversation;\r\n    const setSelectedConversation = props.setSelectedConversation;\r\n    const [messages, setMessages] = useState([]);\r\n    const [newMessage, setNewMessage] = useState();\r\n    const [refresh, setRefresh] = useState(false);\r\n\r\n    useEffect(() => {\r\n        function getMessages() {\r\n            axios.get(`http://localhost:8000/api/messages/${selectedConversation}`)\r\n                .then((res) => res.data)\r\n                .then((data) => { setMessages(data) });\r\n        }\r\n\r\n        getMessages();\r\n    }, [selectedConversation, refresh]);\r\n\r\n    function handleChange(e) {\r\n        setNewMessage(e.target.value);\r\n    }\r\n\r\n    function handleSubmit() {\r\n        axios.post(`http://localhost:8000/api/messages`, { selectedConversation, newMessage })\r\n            .then(setNewMessage(\"\"))\r\n            .then(() => setRefresh(!refresh))\r\n    }\r\n\r\n    function handleClose() {\r\n        axios.put(`http://localhost:8000/api/conversations/${selectedConversation}`)\r\n            .then(() => setSelectedConversation())\r\n    }\r\n\r\n    function handleKeypress(e) {\r\n        if (e.charCode === 13) { handleSubmit(); }\r\n    };\r\n\r\n\r\n    return (\r\n        <div className=\"currentConversation\">\r\n            <button className=\"closeButton\" onClick={() => handleClose()}>✖</button>\r\n            {messages.map(message => <p>{message.content}</p>)}\r\n            <input className=\"conversationInput\" type=\"text\" placeholder=\"Votre message (500 caractères max)\" value={newMessage} onChange={handleChange} onKeyPress={newMessage ? handleKeypress : null} />\r\n            <button onClick={newMessage ? () => handleSubmit() : null}>Envoyer</button>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default CurrentConversation;",{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","replacedBy":"47"},{"ruleId":"48","severity":1,"message":"49","line":6,"column":7,"nodeType":"50","messageId":"51","endLine":6,"endColumn":14},{"ruleId":"52","severity":1,"message":"53","line":23,"column":8,"nodeType":"54","endLine":23,"endColumn":38,"suggestions":"55"},{"ruleId":"48","severity":1,"message":"56","line":6,"column":11,"nodeType":"50","messageId":"51","endLine":6,"endColumn":31},{"ruleId":"48","severity":1,"message":"49","line":4,"column":7,"nodeType":"50","messageId":"51","endLine":4,"endColumn":14},"no-native-reassign",["57"],"no-negated-in-lhs",["58"],"no-unused-vars","'API_URL' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getMessages'. Either include it or remove the dependency array.","ArrayExpression",["59"],"'selectedConversation' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"60","fix":"61"},"Update the dependencies array to be: [getMessages, selectedArchivedConversation]",{"range":"62","text":"63"},[992,1022],"[getMessages, selectedArchivedConversation]"]